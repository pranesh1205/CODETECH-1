import datetime

# Define classes for library items
class LibraryItem:
    def __init__(self, title, author, category):
        self.title = title
        self.author = author
        self.category = category
        self.is_checked_out = False
        self.due_date = None

    def __str__(self):
        return f"Title: {self.title}, Author: {self.author}, Category: {self.category}, Checked out: {self.is_checked_out}"

class Book(LibraryItem):
    def __init__(self, title, author):
        super().__init__(title, author, "Book")

class Magazine(LibraryItem):
    def __init__(self, title, author):
        super().__init__(title, author, "Magazine")

class DVD(LibraryItem):
    def __init__(self, title, author):
        super().__init__(title, author, "DVD")

# Library system to manage the items
class Library:
    def __init__(self):
        self.items = []

    # Add new library item
    def add_item(self, item):
        self.items.append(item)
        print(f"Added {item.title} to the library.")

    # Checkout an item
    def checkout_item(self, title):
        for item in self.items:
            if item.title == title:
                if not item.is_checked_out:
                    item.is_checked_out = True
                    item.due_date = datetime.date.today() + datetime.timedelta(days=14)
                    print(f"{item.title} has been checked out. Due date: {item.due_date}")
                else:
                    print(f"{item.title} is already checked out.")
                return
        print(f"{title} not found in the library.")

    # Return an item
    def return_item(self, title):
        for item in self.items:
            if item.title == title:
                if item.is_checked_out:
                    item.is_checked_out = False
                    overdue_days = (datetime.date.today() - item.due_date).days
                    if overdue_days > 0:
                        fine = overdue_days * 0.50  # Example fine rate
                        print(f"{item.title} returned. You have an overdue fine of ${fine:.2f}")
                    else:
                        print(f"{item.title} returned successfully with no overdue fine.")
                else:
                    print(f"{item.title} was not checked out.")
                return
        print(f"{title} not found in the library.")

    # Search items by title, author, or category
    def search_items(self, query, search_type="title"):
        results = []
        if search_type == "title":
            results = [item for item in self.items if query.lower() in item.title.lower()]
        elif search_type == "author":
            results = [item for item in self.items if query.lower() in item.author.lower()]
        elif search_type == "category":
            results = [item for item in self.items if query.lower() == item.category.lower()]

        if results:
            print("Search Results:")
            for item in results:
                print(item)
        else:
            print(f"No items found for '{query}' in {search_type}.")

# Example usage
library = Library()

# Add books, magazines, and DVDs to the library
library.add_item(Book("The Great Gatsby", "F. Scott Fitzgerald"))
library.add_item(Magazine("National Geographic", "Various"))
library.add_item(DVD("Inception", "Christopher Nolan"))

# Check out and return items
library.checkout_item("The Great Gatsby")
library.return_item("The Great Gatsby")

# Search for items
library.search_items("Gatsby", "title")
library.search_items("Christopher Nolan", "author")
library.search_items("Book", "category")
